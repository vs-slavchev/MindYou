# get all users
GET           /users                                                       controllers.AppUserController.showAllUsers

# search for particular users with the name specified
# ex: /users/search?name=linh
GET           /users/search                                                controllers.AppUserController.searchUsers(name: String)

# get a user by the user_id
# ex: /users/123
GET           /users/:id                                                   controllers.AppUserController.showUser(id: String)

# create a new user with name provided in json format
# ex: {"name":"Andrea"}
# provide authorization token in the authorization header of the request;
POST          /users/create                                                controllers.AppUserController.createAppUser

# generate a friendship with two IDs of the inviter and the invitee
# inviter_id is tokenized, but the invitee_id is the actual_id
# provide inviter_id authorization token in the authorization header of the request;
# provide the actual invitee_id in the url
# ex: /friendships/invite/123
POST          /friendships/invite/:invitee_id                              controllers.FriendshipController.sendFriendRequest(invitee_id: String)

# accept the friendship request between the inviter and the invitee using friendshipId
# ex: /friendships/456/accept
# provide invitee authorization token in the authorization header of the request;
PUT           /friendships/:friendshipId/accept                            controllers.FriendshipController.acceptFriendRequest(friendshipId: String)

# decline the friendship request between the inviter and the invitee using friendshipId
# ex: /friendships/456/decline
# provide invitee authorization token in the authorization header of the request;
DELETE        /friendships/:friendshipId/decline                           controllers.FriendshipController.declineFriendRequest(friendshipId: String)

# retrieve all friend requests sent to a user
# ex: /friendships/receivedRequests
# provide invitee authorization token in the authorization header of the request;
GET           /friendships/receivedRequests                                controllers.FriendshipController.getReceivedFriendRequests

# retrieving all friend requests that have been sent
# ex: /friendships/sentRequests
# provide inviter authorization token in the authorization header of the request;
GET           /friendships/sentRequests                                    controllers.FriendshipController.getSentFriendRequests

# retrieving data of all friends of a user
# ex: /friendships
# provide authorization token in the authorization header of the request;
GET           /friendships                                                 controllers.AppUserController.getFriendList

# start tracking activity with activity_id in the url
# ex: /activities/1/start
# provide authorization token in the authorization header of the request;
POST          /activities/:activity_id/start                               controllers.TrackedActivityController.startActivity(activity_id: Long)

# stop tracking of the currently running activity, without specifying which one it is
# ex: /activities/stop
# provide authorization token in the authorization header of the request;
GET           /activities/stop                                             controllers.TrackedActivityController.stopActivity

# get currently running activity
# ex: /activities/activated
# provide authorization token in the authorization header of the request;
GET           /activities/activated                                        controllers.TrackedActivityController.currentActivity

# get details about an activty blueprint
# ex: /activities/5
GET           /activities/:id                                              controllers.ActivityBlueprintController.getActivityBlueprint(id: String)

# when app is started some activity blueprints are queried to be shown on activities screen
# ex: /activities/top/10 to only show the top 10 activities
GET           /activities/top/:number                                      controllers.ActivityBlueprintController.listActivities(number: Long)

# create a custom activity
# json for now because we might want to send more data, also returns existing activity if already exists
# provide the activity name in json
# ex: {"name":"debugging"}
POST          /activities/create                                           controllers.ActivityBlueprintController.createActivityBlueprint

# get the total hours spent on an activity, for all activities done
# time can be : week, month, quarter, year
# ex. /statistics/hours-per-activity/month
# provide authorization token in the authorization header of the request;
GET           /statistics/hours-per-activity/:time                         controllers.StatisticsController.hoursPerActivity(time)

# for a specific activity get how many hours it was done for every day
# time can be : week, month, quarter, year
# ex. /statistics/hours-per-day/5/month
# provide authorization token in the authorization header of the request;
GET           /statistics/hours-per-day/:activityId/:time                  controllers.StatisticsController.hoursPerDay(activityId, time)

# for the most done activities show the percentile rank of the user among other users
# time can be : week, month, quarter, year
# ex. /statistics/percentile-rank/5/month
# provide authorization token in the authorization header of the request;
GET           /statistics/percentile-rank/:activityId/:time                controllers.StatisticsController.percentileRank(activityId, time)


# retrieve the most popular activities
# time can be: week, month, quarter, year
# ex. /statistics/top-activities/year
GET           /statistics/top-activities/:time                             controllers.StatisticsController.topActivities(time)


# retrieve the records of an activity in the last four weeks
# ex. /statistics/four-weeks-activity/3
GET           /statistics/four-weeks-activity/:activityId/:time            controllers.StatisticsController.fourWeeksActivity(activityId)


# retrieve the top six activities with their record of a particular user
# ex. /statistics/top-six-activities
# provide authorization token in the authorization header of the request;
GET           /statistics/top-six-activities                               controllers.StatisticsController.topSixActivities()


# get a suggestion which is a single random activity that has never been done by the user
# provide authorization token in the authorization header of the request
GET           /statistics/suggestion                                       controllers.StatisticsController.suggestion()