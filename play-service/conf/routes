# get all users
GET           /users                                                       controllers.AppUserController.showAllUsers

# search for particular users with the name specified
# ex: /users/search?name=linh
GET           /users/search                                                controllers.AppUserController.searchUsers(name: String)

# get a user by the user_id
# ex: /users/123
GET           /users/:id                                                   controllers.AppUserController.showUser(id: String)

# provide authorization token in the authorization header of the request
# create a new user with name provided in json format
# ex: {"name":"Andrea"}
POST          /users/create                                                controllers.AppUserController.createAppUser

# generate a friendship with two IDs of the inviter and the invitee in json format
# inviter_id is tokenized, but the invitee_id is the actual_id
# ex: {"inviter_id":123,"invitee_id":321}
POST          /friendships/invite/:invitee_id                              controllers.FriendshipController.sendFriendRequest(invitee_id: String)

# accept the friendship request between the inviter and the invitee using friendshipId and inviteeId
# invitee is tokenized
# ex: /friendships/123/accept/321
PUT           /friendships/:friendshipId/accept/:inviteeId                 controllers.FriendshipController.acceptFriendRequest(friendshipId: String, inviteeId: String)

# decline the friendship request between the inviter and the invitee using friendshipId and inviterId
# invitee is tokenized
# ex: /friendships/123/decline/321
DELETE        /friendships/:friendshipId/decline/:inviteeId                controllers.FriendshipController.declineFriendRequest(friendshipId: String, inviteeId: String)

# retrieving all friend requests that have been received
# ex: /friendships/123/receivedRequests
GET           /friendships/:userId/receivedRequests                        controllers.FriendshipController.getReceivedFriendRequests(userId: String)

# retrieving all friend requests that have been sent
# ex: /friendships/123/sentRequests
GET           /friendships/:userId/sentRequests                            controllers.FriendshipController.getSentFriendRequests(userId: String)

# retrieving data of all friends of a user
# ex: /friendships/123
GET           /friendships                                                 controllers.AppUserController.getFriendList


# start tracking activity with activity_id and user_id provided in json format
# ex: {"activity_id":123,"user_id":321}
POST          /activities/:activity_id/start                               controllers.TrackedActivityController.startActivity(activity_id: String)

# as param give the id of the user
# ex: /activities/123/stop
GET           /activities/stop                                             controllers.TrackedActivityController.stopActivity

# get details about an activty blueprint
# ex: /activities/5
GET           /activities/:id                                              controllers.ActivityBlueprintController.getActivityBlueprint(id: String)

# when app is started some activity blueprints are queried to be shown on activities screen
# ex: /activities/top/10 to only show the top 10 activities
GET           /activities/top/:number                                      controllers.ActivityBlueprintController.listActivities(number: Long)

# create a custom activity
# json for now because we might want to send more, also returns existing activity if already exists
# provide the activity name in json
# ex: {"name":"debugging"}
POST          /activities/create                                           controllers.ActivityBlueprintController.createActivityBlueprint

# get the total hours spen on an activity, for all activities done
# time can be : recent or soon or longterm
# ex. /statistics/hours-per-activity/123/recent
GET           /statistics/hours-per-activity/:userId/:time                 controllers.StatisticsController.hoursPerActivity(userId, time)

# for a specific activity get how many hours it was done for every day
# ex. /statistics/hours-per-day/123/321/soon
GET           /statistics/hours-per-day/:userId/:activityId/:time          controllers.StatisticsController.hoursPerDay(userId, activityId, time)

# ex. /statistics/percentile-rank/123/321/soon
GET           /statistics/percentile-rank/:userId/:activityId/:time        controllers.StatisticsController.percentileRank(userId, activityId, time)